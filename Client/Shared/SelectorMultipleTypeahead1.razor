@using Blazored.Typeahead
@typeparam T


<BlazoredTypeahead TValue="T" TItem="T" SearchMethod="SearchMethod" Value="sampleItem"
                   ValueChanged="ElementoSeleccionado" ValueExpression="@(() => sampleItem)">
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
    <NotFoundTemplate>
        Lo sentimos, no hubo registros encontrados
    </NotFoundTemplate>
    <SelectedTemplate></SelectedTemplate>
</BlazoredTypeahead>

<ul class="list-group">
    @foreach (var item in ElementosSeleccionados)
    {
        <li draggable="true" @ondragstart="(() => HandleDragStart(item))" @ondragover="(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick="(() => ElementosSeleccionados.Remove(item))" class="badge bg-primary rounded-pill" style="cursor:pointer">
                X
            </span>
        </li>
    }
</ul>

@code {
    [Parameter, EditorRequired]
    public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; } = null!;

    [Parameter]
    public List<T> ElementosSeleccionados { get; set; } = new List<T>();

    [Parameter, EditorRequired]
    public RenderFragment<T> MyResultTemplate { get; set; } = null!;

    [Parameter, EditorRequired]
    public RenderFragment<T> MyListTemplate { get; set; } = null!;

    T? sampleItem = default(T);
    T? itemArrastrado;

    private void ElementoSeleccionado(T item)
    {
        if (!ElementosSeleccionados.Any(x => x.Equals(item)))
        {
            ElementosSeleccionados.Add(item);
        }

        sampleItem = default(T);
    }

    private void HandleDragStart(T item)
    {
        itemArrastrado = item;
    }

    private void HandleDragOver(T item)
    {
        if (itemArrastrado is null)
        {
            return;
        }

        if (!item.Equals(itemArrastrado))
        {
            var indiceElementoArrastrado = ElementosSeleccionados.IndexOf(itemArrastrado);
            var indiceElemento = ElementosSeleccionados.IndexOf(item);
            ElementosSeleccionados[indiceElemento] = itemArrastrado;
            ElementosSeleccionados[indiceElementoArrastrado] = item;
        }
    }
}
