@* expresión implícita *@
@* <p>Hola, @UtilidadesString.Transformar(nombre)</p> *@
@* expresión explícita *@
@* <p>Vamos a sumar 2 + 2 = @(2 + 2)</p> *@
@* expresión implícita *@
@* <button @onclick=@(() => Console.WriteLine("Hi from button"))>Presióname</button> *@
@* expresión explícita *@
@* <button @onclick=@ManejarClickBoton>Presióname</button> *@

@* <div>
<h3>Película</h3>
<p>Título : <b>@WakandaForever.Titulo</b></p>
<p>Fecha de lanzamiento: <b>@WakandaForever.FechaLanzamiento</b></p>
</div> *@

<div>
    <h3>Películas Listado</h3>
    @* @if (pelis is null)
    {
        @if (Cargando is not null)
        {
            @Cargando    
        }
        else
        {
            <img alt="alt" src="https://i.pinimg.com/originals/3d/6a/a9/3d6aa9082f3c9e285df9970dc7b762ac.gif">
        }
    }
    else if (pelis.Count == 0)
    {
        @if (NoHayPelis is not null)
        {
            @NoHayPelis
        }
        else
        {
            <p>No hay películas para mostrar</p>
        }
    }
    else
    { *@
        @* <input type="checkbox" @onchange="(() => MostrarBotones = !MostrarBotones)" /> *@
        <input type="checkbox" @bind="MostrarBotones" />
        <span>Mostrar botones</span>
        <ListadoGenerico listado="pelis">
            <HayPelis Context="pelicula" >
                <PeliculaIndividual pelicula="pelicula" MostrarBotones="MostrarBotones" EliminarPeli="EliminarPeli" />
            </HayPelis>
        </ListadoGenerico>
        @* @foreach (var pelicula in pelis)
        {
            <PeliculaIndividual pelicula="pelicula" MostrarBotones="MostrarBotones" EliminarPeli="EliminarPeli"/>
        } *@
    @* } *@
</div>

@code {
    // protected override async Task OnInitializedAsync()
    // {
    //     @* await Task.Delay(3000);
    //     pelis = ObtenerPeliculas(); *@
    // }

    protected override void OnInitialized()
    {
        Console.WriteLine($"OnInitialized - Cantidad de pelis {pelis.Count}");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"OnParametersSet - Cantidad de pelis {pelis.Count}");
    }

    protected override void OnAfterRender(bool primeraRenderizacion)
    {
        Console.WriteLine("OnAfterRender: Primera vez: " + primeraRenderizacion);
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }

    [Parameter]
    public RenderFragment Cargando { get; set; } = null!;

    [Parameter]
    public RenderFragment NoHayPelis { get; set; } = null!;

    bool MostrarBotones = false;

    string nombre = "Alain Jorge Acuña";

    @* string Transformar(string valor) => valor.ToUpper(); *@

    void ManejarClickBoton()
    {
        Console.WriteLine("Me han clickeado desde una function!");
    }

    Pelicula WakandaForever { get { return ObtenerPelicula(); } }
    [Parameter]
    [EditorRequired]
    public List<Pelicula> pelis { get; set; } = null!;

    Pelicula ObtenerPelicula()
    {
        return new Pelicula
            {
                Titulo = "Wakanda Forever",
                FechaLanzamiento = new DateTime(2022, 11, 11)
            };
    }

    List<Pelicula> ObtenerPeliculas()
    {
        return new List<Pelicula>(){
new Pelicula
{
Titulo = "<b>Wakanda Forever</b>",
FechaLanzamiento = new DateTime(2023, 9, 11)
},
new Pelicula
{
Titulo = "<i>Moana</i>",
FechaLanzamiento = new DateTime(2016, 11, 13)
},
new Pelicula
{
Titulo = "Inception",
FechaLanzamiento = new DateTime(2010, 7, 16)
}
};
    }

    private void EliminarPeli(Pelicula peliName)
    {
        Console.WriteLine($"Eliminando la película {peliName.Titulo}");
        pelis.Remove(peliName);
    }
}
